<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>database on Zorro's Blog</title><link>https://zengzilu.github.io/tags/database/</link><description>Recent content in database on Zorro's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 03 Jan 2024 01:35:55 +0800</lastBuildDate><atom:link href="https://zengzilu.github.io/tags/database/rss.xml" rel="self" type="application/rss+xml"/><item><title>Golang Migration</title><link>https://zengzilu.github.io/post/golang-migration/</link><pubDate>Wed, 03 Jan 2024 01:35:55 +0800</pubDate><guid>https://zengzilu.github.io/post/golang-migration/</guid><description>一个项目长期运行，一定设计到数据库表的迭代升级，尤其是在多环境交付的模式下，清晰严格的版本数据库设计升降机管理显得尤为必要。在go语言下有相</description></item></channel></rss>